# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy LAMP site to QA

on:
  push:
    branches:
      - qa
    paths-ignore:
      - '.db-scripts/**'

jobs:
  deploy:
    name: Deploy
    runs-on: AbbVie-lamp-qa
    container:
      image: docker:latest
    environment: qa

    steps:
    - name: Checkout LAMP core
      uses: actions/checkout@v2
      with:
        repository: AbbVie/lamp-core
        token: ${{ secrets.LAMP_BOT_TOKEN }}
        path: core

    - name: Checkout site code
      uses: actions/checkout@v2
      with:
        path: site

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.LAMP_AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registries: ${{ secrets.DEV_ACCOUNT }}

    - name: Tag image in Amazon ECR
      id: tag-image
      env:
        SITE_TYPE: ${{ secrets.SITE_TYPE }}
        ECR_REGISTRY_ID: ${{ secrets.DEV_ACCOUNT }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.SITE_NAME }}
        OLD_RELEASE: dev
        RELEASE: qa
      run: |
        alias aws='docker run --rm amazon/aws-cli'
        aws --version
        source ./core/site/shared/tag-image.sh
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$RELEASE"

    - name: Update task definition
      id: update-task-definition
      env:
        SITE_TYPE: ${{ secrets.SITE_TYPE }}
        RELEASE_IMAGE: ${{ steps.tag-image.outputs.image }}
        SITE_NAME: ${{ secrets.SITE_NAME }}
        SITE_URL: ${{ secrets.QA_SITE_URL }}
        
      run: |
        source ./core/site/${SITE_TYPE}/update-task-definition.sh

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ./site/.docker/ecs/task-definition.json
        container-name: ${{ secrets.SITE_NAME }}-container
        image: ${{ steps.tag-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.SITE_NAME }}-service
        cluster: Lamp
        wait-for-service-stability: true